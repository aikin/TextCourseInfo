[
    {
        "type": "text_course",
        "basic": {
            "title": "The Very Basic",
            "desc": [
                "<p>Let's look at a basic example. This example should be familiar(and predictable) to just about anyone with a bit of programming experience:</p>"
            ],
            "code": "function() {\r\n\tvar a = 10;\r\n\tif (a > 5)\r\n {\r\n\t\ta = 7;\r\n\t} \r\n\talert(a);\r\n}",
            "question": {
                "content": "When executed, what Value will be alerted to the screen?",
                "options": ["7", "10", "null", "undefined"]
            },
            "answer": {
                "value": "7",
                "explains": [
                    "<p>What happens here is exactly as you might expect. You declare a local variable and set its value to 10. Its value is indeed greater than 5, so you set its value to 7. You then alert this new value, 7</p>"
                ]
            },
            "type": "topic",
            "order": 0
        },
        "extra": {
            "section": { "name":  "angular: template view" }
            }
    },

    {
        "type": "text_course",
        "basic": {
            "title": "Global Variables Intro",
            "desc": [
                "<p>Okay, that's a bit odd, you might be saying, But what if you're not in a function? Are there global variables?  Good question!  I wish I'd thought of it myself.</p>",
                "<p>Let's look at some code:</p>",
                "<pre><code class='javascript'>function () { a = 3; alert(a); } </code></pre>",
                "<p>Now, what exactly is a global variable?  Where does it actually reside?</p>",
                "<p>When Javascript comes across a global variable, it needs somewhere to put it.  It needs somewhere that everywhere else on the page can access.  So, it uses the window object.  This object is around for the entire lifetime of the page, and everything can access it, so it's perfect!</p>"
            ],
            "type": "text",
            "order": 1
        },
        "extra": {
            "section": { "name":  "angular: template view" }
        }
    },

    {
        "type": "text_course",
        "basic": {
            "title": "Function Scope",
            "desc": [
                "<p>That first one probably wasn't too bad, but this next one might be a bit surprising:</p>"
            ],
            "code": "function() { if(true) { var a = 5;} alert(a);}",
            "question": {
                "content": "Ok, so what would be the value alerted by this function?",
                "options": ["0", "5", "null", "undefined"]
            },
            "answer": {
                "value": "5",
                "explains": [
                    "<p>I can hear screams of, That's an error! from the Javascript uninitiated.  Certainly the variable </p>",
                    "<p>Based on knowledge of several other languages (such as Java or C), this would certainly be true.  However, Javascript doesn't  change scope when entering  statements, loops, or anything like that, really.  The only common thing that will change the scope is entering a function.</p>"
                ]
            },
            "type": "topic",
            "order": 2
        },
        "extra": {
            "section": { "name":  "angular: template view" }
        }
    }
]
